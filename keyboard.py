from collections import OrderedDict
from enum import Enum

from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder


class Buttons(Enum):
    QUESTION = "üíå –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
    SHOP = "üìç –ù–∞—à –º–∞–≥–∞–∑–∏–Ω"
    BONUS = "üéÅ –ë–æ–Ω—É—Å –∑–∞ –æ—Ç–∑—ã–≤"
    START = "üåê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    SCREENSHOT_INSTRUCTIONS = "‚úÖ –Ø –æ—Å—Ç–∞–≤–∏–ª(-–∞) –æ—Ç–∑—ã–≤"
    SKIP_COUPON = "‚è© –ë–µ–∑ –∫—É–ø–æ–Ω–∞"
    ACCEPT_BONUS = "‚úÖ –ü—Ä–∏–Ω—è—Ç—å"
    DECLINE_BONUS = "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    BONUS_ALREADY_ACCEPTED = "üëç –ü—Ä–∏–Ω—è—Ç–æ"
    BONUS_ALREADY_DECLINED = "üëé –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    SUBSCRIBE = "üì¨ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    UNSUBSCRIBE = "üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
    PLACEHOLDER = "–Ø PLACEHOLDER"
    DELETE_POST = "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"
    POST_DELETED = "üëé –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω"


class BaseReplyKeyboard:
    def build(self, 
        buttons,
        adjust: tuple | bool =False
    ):
        builder = ReplyKeyboardBuilder()
        for button in buttons:
            builder.button(text=button.value)
        if adjust:
            builder.adjust(*adjust)
        return builder.as_markup(resize_keyboard=True)


class BaseInlineKeyboard:
    def build(self, buttons, callback_data_list):
        builder = InlineKeyboardBuilder()
        for button, callback_data in zip(buttons, callback_data_list):
            builder.button(text=button.value, callback_data=callback_data.value)
        return builder.as_markup(resize_keyboard=True)


class GreetingsKeyboard(BaseReplyKeyboard):
    def build(self):
        buttons = [Buttons.QUESTION, Buttons.SHOP, Buttons.BONUS]
        return super().build(buttons)
    def build_with_condition(self, is_subscribed):
        buttons = [
            Buttons.QUESTION, Buttons.SHOP, Buttons.BONUS,
            (
                Buttons.UNSUBSCRIBE if is_subscribed else Buttons.SUBSCRIBE
            )
        ]
        adjust = (2, 2)
        return super().build(buttons, adjust=adjust)


class BonusKeyboard(BaseReplyKeyboard):
    def build(self):
        buttons = [Buttons.SCREENSHOT_INSTRUCTIONS, Buttons.START]
        return super().build(buttons)


class GetBackKeyboard(BaseReplyKeyboard):
    def build(self):
        buttons = [Buttons.START]
        return super().build(buttons)


class SkipCouponKeyboard(BaseReplyKeyboard):
    def build(self):
        buttons = [Buttons.SKIP_COUPON, Buttons.START]
        return super().build(buttons)


class BonusResponseKeyboard(BaseInlineKeyboard):
    def build(self):
        buttons = [Buttons.ACCEPT_BONUS, Buttons.DECLINE_BONUS]
        callback_data_list = [Buttons.ACCEPT_BONUS, Buttons.DECLINE_BONUS]
        return super().build(buttons, callback_data_list)


class BonusResponseHandledKeyboard(BaseInlineKeyboard):
    def build_with_condition(self, is_accepted: bool):
        buttons = [
            (
                Buttons.BONUS_ALREADY_ACCEPTED if is_accepted
                else Buttons.BONUS_ALREADY_DECLINED
            )
        ]
        return super().build(buttons, [Buttons.PLACEHOLDER for i in buttons])


class DeletePostKeyboard(BaseInlineKeyboard):
    def build_with_condition(self, is_deleted: bool):
        buttons = [
            (
                Buttons.POST_DELETED if is_deleted
                else Buttons.DELETE_POST
            )
        ]
        callbacks = [
            (
                Buttons.POST_DELETED if is_deleted
                else Buttons.DELETE_POST
            )
        ]
        return super().build(buttons, callbacks)